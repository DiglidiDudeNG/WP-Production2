<?php

/**
 * RB_Spectacle
 * ===========
 *
 * Le contrôleur principal des spectacles.
 * 
 * @package RB
 */
class RB_Spectacle extends RB_Section
{
	/** @const string Le nom de la slug par défaut. */
	const DEFAULT_SLUG = 'rb_spectacle_';
	
	/** @var RB_Loader Le loader.
	 */
	public $loader;

	/**
	 * Constructeur. Fais pas mal de choses.
	 *
	 * @access public
	 */
	public function __construct()
	{
		parent::__construct( 'spectacle' ); // TODO: Change the autogenerated stub
	}
	
	/**
	 * Crée L'objet admin.
	 *
	 * Devra comprendre une variable « $args » qui comprends les arguments de la classe correspondante 
	 * qui hérite de RB_Admin.
	 */
	public function creer_objet_admin()
	{
		// Définir la table d'arguments.
		$args = array(
			'version'      => $this->get_version(),
			'hide_columns' => array( 'date', 'author', 'comments' ),
			'styles'       => array(
				array(
					'handle'   => self::DEFAULT_SLUG . 'admin',
					'filepath' => 'css/'.str_replace(self::DEFAULT_SLUG, '_', '-').'admin.css',
				)
			),
			'scripts' => array(
				// TODO ajouter des scripts si possible.
			),
			'metadatas' => array(
				/* Liste des IDs des prestations. */
				'rb_spectacle_liste_prestation_id' => array(
					'label'         => __( 'Liste des Prestations' ),
					'default'       => '{}',
					'in_columns'    => true,
					'is_query'      => true,
					'list_query'    => array(
						'post_type' => 'prestation',
						'meta_key'  => 'rb_prestation_spectacle_id',
					),
					'column_query'       => array(
						'post_type'      => 'prestation',
						'meta_key'       => 'rb_prestation_spectacle_id', // TODO adapter.
						'meta_value_num' => '%i',
						'orderby'        => '',
					    'order'          => 'DESC',
					),
					'render_cb'          => array($this, 'render_rb_spectacle_liste_prestation_id')
				),
				/* Urls */
				'rb_spectacle_artiste_site_url' => array(
					'label'     => __( "URL du site de l'artiste" ),
					'default'   => '#',
					'render_cb' => array($this, 'render_rb_spectacle_artiste_site_url'),
				),
				'rb_spectacle_artiste_facebook_url' => array(
				    'label'     => __( "URL du Facebook de l'artiste" ),
					'default'   => '#',
				    'render_cb' => array($this, 'render_rb_spectacle_artiste_facebook_url'),
				),
				/* Prix */
				'rb_spectacle_prix' => array(
					'label'     => __( "Prix du billet" ),
					'default'   => 1.00,
					'render_cb' => array($this, 'render_rb_spectacle_prix'),
				),
				/* caroussel, bandeau et mini */
				'rb_spectacle_img_mini_url' => array(
					'label'     => __( "Image Miniature" ),
					'is_file_upload' => true,
					'render_cb' => array($this, 'render_rb_spectacle_img_mini_url'),
				),
				'rb_spectacle_img_caroussel_url' => array(
					'label'     => __( "Image dans le Caroussel" ),
					'is_file_upload' => true,
					'render_cb' => array($this, 'render_rb_spectacle_img_caroussel_url'),
				),
				'rb_spectacle_img_bandeau_url' => array(
					'label'     => __( "Image dans la Page du Spectacle (bandeau)" ),
					'is_file_upload' => true,
					'render_cb' => array($this, 'render_rb_spectacle_img_bandeau_url'),
				),
			),
			'metaboxes' => array(
				array( // Infos de l'artiste.
					'id'            => 'rb_spectacle_artiste_infos',
					'title'         => 'Infos générales du Spectacle',
					'show_dashicon' => true,
					'screen'        => 'spectacle',
					'context'       => 'normal',
					'priority'      => 'core',
					'metadatas'     => [
						'rb_spectacle_artiste_site_url',
						'rb_spectacle_artiste_facebook_url',
						'rb_spectacle_prix',
					],
				),
				array( // Infos des prestations.
					'id'            => 'rb_spectacle_info_prestations',
					'title'         => 'Infos des prestations',
					'show_dashicon' => true,
					'dashicon'      => 'tickets-alt',
					'screen'        => 'spectacle',
					'context'       => 'normal',
					'priority'      => 'core',
					'metadatas'     => [ 'rb_spectacle_liste_prestation_id' ],
				),
			    array( // Uploader d'images.
		            'id'            => 'rb_spectacle_images',
				    'title'         => "Images Promotionnelles",
				    'show_dashicon' => true,
				    'dashicon'      => 'format-gallery',
				    'screen'        => 'spectacle',
				    'context'       => 'side',
				    'priority'      => 'core',
				    'metadatas'     => [
					    'rb_spectacle_img_mini_url',
					    'rb_spectacle_img_caroussel_url',
					    'rb_spectacle_img_bandeau_url',
				    ],
			    ),
			),
		);
		
		$nom_classe = __CLASS__."_Admin";
		
		// Créer l'objet qui gère le panneau d'administration.
		return new $nom_classe( $this->post_type, $args );
	}
	
	
	/**
	 * Définit les hooks spécifiques au panneau d'administration des Spectacles.
	 * 
	 * Est là au cas où on a besoin d'autres hooks que ceux de la classe parent.
	 *
	 * @access  protected
	 * @see     RB::define_all_admin_hooks
	 */
	public function define_other_hooks()
	{
		// Ajoutez c'que vous voulez là !
	}

	/**
	 * Crée le post type `Spectacle`
	 */
	public function create_post_type()
	{
		// Déclarer les labels du post-type.
		$labels = array(
			'name'                => _x( 'Spectacles', 'Post Type General Name', '/langage' ),
			'singular_name'       => _x( 'Spectacle', 'Post Type Singular Name', '/langage' ),
			'menu_name'           => __( 'Spectacle', '/langage' ),
			'parent_item_colon'   => __( 'Parent', '/langage' ),
			'all_items'           => __( 'Tous les Spectacles', '/langage' ),
			'view_item'           => __( 'Voir Spectacle', '/langage' ),
			'add_new_item'        => __( 'Ajouter un Spectacle', '/langage' ),
			'add_new'             => __( 'Ajouter', '/langage' ),
			'edit_item'           => __( 'Éditer les infos du Spectacle', '/langage' ),
			'update_item'         => __( 'Mettre à jour les infos du Spectacle', '/langage' ),
			'search_items'        => __( 'Rechercher un Spectacle', '/langage' ),
			'not_found'           => __( 'Non-trouvé', '/langage' ),
			'not_found_in_trash'  => __( 'Non-trouvé dans la corbeille', '/langage' ),
		);

		// Déclarer les arguments du rewrite pour le post-type.
		$rewrite = array(
			'slug'                => self::DEFAULT_SLUG,
			'with_front'          => true,
			'pages'               => true,
			'feeds'               => true,
		);

		// Déclarer les arguments principaux du post-type.
		$args = array(
			'label'               => __( 'spectacle', '/langage' ),
			'description'         => __( 'Un spectacle.', '/langage' ),
			'labels'              => $labels,
			'supports'            => array( 'title', 'editor', 'thumbnail', ),
			'taxonomies'          => array( 'category' ), // TODO être sûr s'il faut pas ajouter les "post_tags"
			'hierarchical'        => false,
			'public'              => true,
			'show_ui'             => true,
			'show_in_menu'        => true,
			'show_in_nav_menus'   => true,
			'show_in_admin_bar'   => true,
			'menu_position'       => 25, // Sous les commentaires.
			'menu_icon'           => 'dashicons-store', // Icône bin sympa
			'can_export'          => true, // Pour faire des backups.
			'has_archive'         => true, // Eh, why not?
			'exclude_from_search' => false, // On veut être capable de les rechercher.
			'publicly_queryable'  => true,
			'rewrite'             => $rewrite,
			'capability_type'     => 'page', // C'est pas vraiment un post.
		);

		// Enregistre le post-type à l'aide de la liste d'arguments.
		register_post_type( $this->post_type, $args );
	}
	
	/**
	 * Effectue le rendu de rb_spectacle_liste_prestation_id.
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_liste_prestation_id( $post_id, $metadata )
	{
		// Déclarer variables locales
		$valeur = get_post_meta( $post_id, $metadata->get_key(), true );
		
		if ( empty($valeur) )
			$valeur = '{}';
			
		$JSONtoArray = json_decode( $valeur );
		$retour = '';
		
		foreach ( $JSONtoArray as $id )
		{
			$retour .= $id . "<br />";
		}
		
		return $retour;
	}
	
	/**
	 * render_rb_spectacle_artiste_site_url
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_artiste_site_url( $post_id, $metadata )
	{
		$valeur = get_post_meta( $post_id, $metadata->get_key(), true );
		$retour = '<input type="url" id="' . $metadata->get_key() 
		          . '" name="' . $metadata->get_key() 
		          . '" value="' . $valeur . '" />';
		
		return $retour;
	}
	
	/**
	 * render_rb_spectacle_artiste_facebook_url
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_artiste_facebook_url( $post_id, $metadata )
	{
		$valeur = get_post_meta( $post_id, $metadata->get_key(), true );
		$retour = '<input type="url" id="' . $metadata->get_key() 
		          . '" name="' . $metadata->get_key() 
		          . '" value="' . $valeur . '" />';
		
		return $retour;
	}

/**
	 * render_rb_spectacle_prix
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_prix( $post_id, $metadata )
	{
		$valeur = get_post_meta( $post_id, $metadata->get_key(), true );
		$retour = '<input type="number" id="' . $metadata->get_key() 
		          . '" name="' . $metadata->get_key() 
		          . '" min="1.00" max="999.00" step="0.01" value="' . $valeur . '" />';
		
		return $retour;
	}
	
	/**
	 * render_rb_spectacle_img_mini_url
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_img_mini_url( $post_id, $metadata )
	{
		return $this->render_img($post_id, $metadata);
	}
	
	/**
	 * render_rb_spectacle_img_caroussel_url
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_img_caroussel_url( $post_id, $metadata )
	{
		return $this->render_img($post_id, $metadata);
	}
	
	/**
	 * rb_spectacle_img_bandeau_url
	 *
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_rb_spectacle_img_bandeau_url( $post_id, $metadata )
	{
		return $this->render_img($post_id, $metadata);
	}
	
	/**
	 * Effectue le rendu d'une image.
	 * 
	 * @param             $post_id
	 * @param RB_Metadata $metadata
	 *
	 * @return string
	 */
	public function render_img( $post_id, $metadata )
	{
		// Pogner la metadata du post courant.
		$valeur = get_post_meta( $post_id, $metadata->get_key(), true );
		$retour = '';
		
		if ( '' == $valeur )
			$retour .= '<p class="description">'.__( "Vous n'avez aucune image miniature attachée à ce spectacle." ).'</p>';
		else
			$retour .= '<img src="'.$valeur.'" width="100%" />';
		
		$retour .= '</p>';
		
		$retour .= '<input id="' . $metadata->get_key() . '" type="file" name="' . $metadata->get_key() . '" value="' . $valeur . '"/>';
		
		return $retour;
	}
}
