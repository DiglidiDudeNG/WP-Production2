<?php

/**
 * RB_Spectacle
 * ===========
 *
 * Le contrôleur principal des spectacles.
 *
 * @package RB
 */
class RB_Spectacle extends RB_Section
{
	/** @const  String Le nom de la slug par défaut. */
	const SLUG_DEFAULT = 'rb-spectacle-slug';

	/**
	 * Constructeur. Fais pas mal de choses!
	 *
	 * > NOTE DE FÉLIX: <br />
	 * > C't'une pas pire de bonne idée d'inspecter le code pour cte fonction-là!
	 *
	 * @access public
	 * @param null|RB_Loader $loader Le loader qui va être appelé pour les hooks.
	 */
	public function __construct( RB_Loader $loader )
	{
		parent::__construct( $loader ); // TODO: Change the autogenerated stub
	}

	/**
	 * Charge les dépendances du programme.
	 *
	 * Lorsqu'on crée une nouvelle
	 *
	 * @access public
	 * @see RB::load_all_dependencies
	 */
	public function load_dependencies()
	{
		// Inclure les fonctions d'administration, si on est loggé en tant qu'admin.
		// Ça va réduire le load.
		if ( $this->is_admin ) {
			/** @noinspection PhpIncludeInspection */
			require_once plugin_dir_path( dirname( __FILE__ ) ) . 'admin/class-rb-spectacle-admin.php';
		}
	}

	/**
	 * Définit tous les hooks du module.
	 *
	 * @param \RB_Loader $loader
	 */
	protected function define_hooks(RB_Loader $loader)
	{
		// Création du Custom post-type
		$loader->queue_action( 'init', $this, 'create_post_type' );

		if ($this->is_admin) {
			$this->define_admin_hooks($loader);
		}
	}

	/**
	 * Définit les hooks du panneau d'administration.
	 *
	 * @access  protected
	 * @see     RB::define_all_admin_hooks
	 *
	 * @param   \RB_Loader $loader Un pointeur vers le loader.
	 */
	protected function define_admin_hooks(RB_Loader $loader)
	{
		$args = array(
			'version' => $this->get_version(),
		);
		
		// Créer l'objet qui gère le panneau d'administration.
		$admin = new RB_Spectacle_Admin( 'spectacle', $args );

		// Ajouter les actions du panneau d'admin à la queue d'action du composant loader.
		$loader->queue_action( 'admin_enqueue_scripts', $admin, 'enqueue_styles' );
		$loader->queue_action( 'add_meta_boxes', $admin, 'add_meta_box' );

		// Ajouter une option sur le menu pour les settings des spectacles
		$loader->queue_action( 'admin_menu', $admin, 'add_option_menu_spectacle');

		// Message d'activation.
		$loader->queue_action( 'activated_plugin', $admin, 'add_activation_message' );

		// Metadata "nb_billets"
		$loader->queue_filter( 'update_spectacle_metadata', $admin, 'update_spectacle_nb_billets' );
	}

	/* ################################ */
	/* DÉBUT DES FONCTIONS DE CALLBACKS */
	/* ################################ */

	/**
	 * Crée le post type `Spectacle`
	 */
	public function create_post_type()
	{
		// Déclarer les labels du post-type.
		$labels = array(
			'name'                => _x( 'Spectacles', 'Post Type General Name', '/langage' ),
			'singular_name'       => _x( 'Spectacle', 'Post Type Singular Name', '/langage' ),
			'menu_name'           => __( 'Spectacle', '/langage' ),
			'parent_item_colon'   => __( 'Parent', '/langage' ),
			'all_items'           => __( 'Tous les Spectacles', '/langage' ),
			'view_item'           => __( 'Voir les infos du Spectacle', '/langage' ),
			'add_new_item'        => __( 'Ajouter un Spectacle', '/langage' ),
			'add_new'             => __( 'Ajouter', '/langage' ),
			'edit_item'           => __( 'Éditer les infos du Spectacle', '/langage' ),
			'update_item'         => __( 'Mettre à jour les infos du Spectacle', '/langage' ),
			'search_items'        => __( 'Chercher un Spectacle', '/langage' ),
			'not_found'           => __( 'Non-trouvé', '/langage' ),
			'not_found_in_trash'  => __( 'Non-trouvé dans la corbeille', '/langage' ),
		);

		// Déclarer les arguments du rewrite pour le post-type.
		$rewrite = array(
			'slug'                => 'spectacle',
			'with_front'          => true,
			'pages'               => true,
			'feeds'               => true,
		);

		// Déclarer les arguments principaux du post-type.
		$args = array(
			'label'               => __( 'spectacle', '/langage' ),
			'description'         => __( 'Un spectacle.', '/langage' ),
			'labels'              => $labels,
			'supports'            => array( 'title', 'editor', 'thumbnail', ),
			'taxonomies'          => array( 'category' ), // TODO être sûr s'il faut pas ajouter les "post_tags"
			'hierarchical'        => false,
			'public'              => true,
			'show_ui'             => true,
			'show_in_menu'        => true,
			'show_in_nav_menus'   => true,
			'show_in_admin_bar'   => true,
			'menu_position'       => 25, // Sous les commentaires.
			'menu_icon'           => 'dashicons-store', // Icône bin sympa
			'can_export'          => true, // Pour faire des backups.
			'has_archive'         => true, // Eh, why not?
			'exclude_from_search' => false, // On veut être capable de les rechercher.
			'publicly_queryable'  => true,
			'rewrite'             => $rewrite,
			'capability_type'     => 'page', // C'est pas vraiment un post.
		);

		// Enregistre le post-type à l'aide de la liste d'arguments.
		register_post_type( 'spectacle', $args );
	}
}
